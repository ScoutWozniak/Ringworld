@using Sandbox;
@using System;
@using System.Linq;
@using System.Collections;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Sandbox.Menu;
@using Sandbox.UI;

@namespace Ringworld

<style>
    checkbox {
        width: 100%;
        flex-direction: row;
        margin-bottom: 10px;
        cursor: pointer;
        &.checked {
        color: white;
    }
    }

    convartoggle {
        width: 100%;
        height: 50px;
    }

    iconpanel {
        font-family: Material Icons;
        text-transform: lowercase;
    }

</style>

<root>

    @if ( Lobby == null ) 
    {
        <div class="controls">
            <a class="button">Loading...</a>

            <a class="button" href="/lobby/list">Return</a>
        </div>
    }
    else
    {
        
        <div class="controls">
            <div class="col">
                <label>Members (@Lobby.MemberCount/@Lobby.MaxMembers)</label>

                <div class="span">
                    @foreach (var member in Lobby.Members)
                    {
                        <img class="avatar" src="avatar:@member.Id" tooltip="@member.Name" />
                    }
                </div>
            </div>
            

           @if ( Lobby.Owner.IsMe )
            {
                <OfficialMaps></OfficialMaps>
                <div class="span">
                    @if ( MaxPlayersSupported > 1 )
                    {
                        <FormGroup class="form-group">
                            <Label>Maximum Players</Label>
                            <Control>
                                <SliderControl ShowRange=@true Min=@(1f) Max=@MaxPlayersSupported Value:bind=@Game.Menu.Lobby.MaxMembers />
                            </Control>
                        </FormGroup>
                    }

                    <FormGroup class="form-group">
                        <Control>
                            <label>Map: @(Package.Fetch(Game.Menu.Lobby.Map, true).Result.Title)</label>
                        </Control>
                    </FormGroup>
                </div>

                <div class="span">
                    <label>Gamemode Settings:</label>
                </div>

                <div class="span">
                    @if (getGamemodeConvars() != null)
                    {
                        @foreach (var convar in getGamemodeConvars())
                        {
                            <label>@convar.readableName</label>
                            @if ((int)convar.conVarType == 1)
                            {
                                <ConvarButton cvarName=@convar.conVarName/>
                            }
                            @if ((int)convar.conVarType == 0)
                            {
                                <ConvarSlider max=@convar.maxVal min=@convar.minVal cvarName=@convar.conVarName/>
                            }
                            @if ((int)convar.conVarType == 2)
                            {
                                <ConvarSelect cvarsettings=@(replication(convar.options)) cvarName=@convar.conVarName/>

                            }
                        }
                    }
                </div>

        }

           <div class="spacer"/>

            <a class="button" @onclick=@LeaveLobby>Leave Lobby</a>

            @if (Lobby.Owner.IsMe){
                <a class="button" @onclick=@StartGame>Start</a>
            }
        </div>
    }
</root>

@code
{
    public List<string> replication(List<string> test)
    {
        return test;
    }

    public List<Option> choicesToOptions(List<string> choices)
    {

        var options = new List<Option>();

        foreach (var value in choices)
        {
            Option newoption = new Option();
            newoption.Value = value;
            newoption.Title = value;
            options.Add(newoption);
        }
        return options;
    }

    public List<ConvarDefinition> getGamemodeConvars()
    {
        var gamemode = ResourceLibrary.Get<GamemodeData>("config/gamemodes/slayer.gamemode");
        if (gamemode == null)
            return null;

        foreach (var cvar in gamemode.convarNames)
        {
        }

        return gamemode.convarNames;
    }
}